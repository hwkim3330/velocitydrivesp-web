[{"FileName":"/home/kim/Downloads/Microchip_VelocityDRIVE_CT-UI-linux-2025.07.12/resources/bin/wwwroot/downloads/coreconf/5151bae07677b1501f9cf52637f2a38f/ietf-yang-structure-ext.yang","ArgumentStart":7,"ArgumentStop":29,"KeywordStart":0,"KeywordStop":5,"ArgumentLine":1,"ArgumentColumn":7,"type":"Module","argument":"ietf-yang-structure-ext","extension-name":null,"statements":[{"ArgumentStart":48,"ArgumentStop":50,"KeywordStart":35,"KeywordStop":46,"ArgumentLine":2,"ArgumentColumn":15,"type":"Version","argument":"1.1","extension-name":null,"statements":[]},{"ArgumentStart":65,"ArgumentStop":117,"KeywordStart":55,"KeywordStop":63,"ArgumentLine":3,"ArgumentColumn":13,"type":"Namespace","argument":"urn:ietf:params:xml:ns:yang:ietf-yang-structure-ext","extension-name":null,"statements":[]},{"ArgumentStart":129,"ArgumentStop":130,"KeywordStart":122,"KeywordStop":127,"ArgumentLine":4,"ArgumentColumn":9,"type":"Prefix","argument":"sx","extension-name":null,"statements":[]},{"ArgumentStart":153,"ArgumentStop":212,"KeywordStart":136,"KeywordStop":147,"ArgumentLine":7,"ArgumentColumn":5,"type":"Organization","argument":"IETF NETMOD (NETCONF Data Modeling Language) Working Group","extension-name":null,"statements":[]},{"ArgumentStart":229,"ArgumentStop":540,"KeywordStart":217,"KeywordStop":223,"ArgumentLine":9,"ArgumentColumn":5,"type":"Contact","argument":"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\nWG List:  <mailto:netmod@ietf.org>\n\nAuthor:   Andy Bierman\n          <mailto:andy@yumaworks.com>\n\nAuthor:   Martin Bjorklund\n          <mailto:mbj+ietf@4668.se>\n\nAuthor:   Kent Watsen\n          <mailto:kent+ietf@watsen.net>","extension-name":null,"statements":[]},{"ArgumentStart":561,"ArgumentStop":1590,"KeywordStart":545,"KeywordStop":555,"ArgumentLine":21,"ArgumentColumn":5,"type":"Description","argument":"This module contains conceptual YANG specifications for defining\nabstract data structures.\n\nThe key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\nNOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n'MAY', and 'OPTIONAL' in this document are to be interpreted as\ndescribed in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\nthey appear in all capitals, as shown here.\n\nCopyright (c) 2020 IETF Trust and the persons identified as\nauthors of the code.  All rights reserved.\n\nRedistribution and use in source and binary forms, with or\nwithout modification, is permitted pursuant to, and subject to\nthe license terms contained in, the Simplified BSD License set\nforth in Section 4.c of the IETF Trust's Legal Provisions\nRelating to IETF Documents\n(http://trustee.ietf.org/license-info).\n\nThis version of this YANG module is part of RFC 8791\n(https://www.rfc-editor.org/info/rfc8791); see the RFC itself\nfor full legal notices.","extension-name":null,"statements":[]},{"ArgumentStart":1605,"ArgumentStop":1614,"KeywordStart":1596,"KeywordStop":1603,"ArgumentLine":44,"ArgumentColumn":11,"type":"Revision","argument":"2020-06-17","extension-name":null,"statements":[{"ArgumentStart":1640,"ArgumentStop":1658,"KeywordStart":1622,"KeywordStop":1632,"ArgumentLine":46,"ArgumentColumn":7,"type":"Description","argument":"Initial revision.","extension-name":null,"statements":[]},{"ArgumentStart":1681,"ArgumentStop":1723,"KeywordStart":1665,"KeywordStop":1673,"ArgumentLine":48,"ArgumentColumn":7,"type":"Reference","argument":"RFC 8791: YANG Data Structure Extensions.","extension-name":null,"statements":[]}]},{"ArgumentStart":1743,"ArgumentStop":1751,"KeywordStart":1733,"KeywordStop":1741,"ArgumentLine":51,"ArgumentColumn":12,"type":"Extension","argument":"structure","extension-name":null,"statements":[{"ArgumentStart":1768,"ArgumentStop":1771,"KeywordStart":1759,"KeywordStop":1766,"ArgumentLine":52,"ArgumentColumn":13,"type":"ExtensionInstance","argument":"name","extension-name":"argument","statements":[{"ArgumentStart":1793,"ArgumentStop":1796,"KeywordStart":1781,"KeywordStop":1791,"ArgumentLine":53,"ArgumentColumn":18,"type":"YinElement","argument":"true","extension-name":null,"statements":[]}]},{"ArgumentStart":1827,"ArgumentStop":4309,"KeywordStart":1809,"KeywordStop":1819,"ArgumentLine":56,"ArgumentColumn":7,"type":"Description","argument":"This extension is used to specify a YANG data structure that\nrepresents conceptual data defined in YANG.  It is intended to\ndescribe hierarchical data independent of protocol context or\nspecific message encoding format.  Data definition statements\nwithin a 'structure' extension statement specify the generic\nsyntax for the specific YANG data structure, whose name is the\nargument of the 'structure' extension statement.\n\nNote that this extension does not define a media type.  A\nspecification using this extension MUST specify the message\nencoding rules, including the content media type, if\napplicable.\n\nThe mandatory 'name' parameter value identifies the YANG data\nstructure that is being defined.\n\nThis extension is only valid as a top-level statement, i.e.,\ngiven as a substatement to 'module' or 'submodule'.\n\nThe substatements of this extension MUST follow the ABNF\nrules below, where the rules are defined in RFC 7950:\n\n  *must-stmt\n  [status-stmt]\n  [description-stmt]\n  [reference-stmt]\n  *(typedef-stmt / grouping-stmt)\n  *data-def-stmt\n\nA YANG data structure defined with this extension statement is\nencoded in the same way as an 'anydata' node.  This means\nthat the name of the structure is encoded as a 'container',\nwith the instantiated child statements encoded as child nodes\nto this node.\n\nThe module name and namespace value for the YANG module using\nthe extension statement are assigned to each of the data\ndefinition statements resulting from the YANG data structure.\n\nThe XPath document element is the extension statement itself,\nsuch that the child nodes of the document element are\nrepresented by the data-def-stmt substatements within this\nextension.  This conceptual document is the context for the\nfollowing YANG statements:\n\n  - must-stmt\n  - when-stmt\n  - path-stmt\n  - min-elements-stmt\n  - max-elements-stmt\n  - mandatory-stmt\n  - unique-stmt\n  - ordered-by\n  - instance-identifier data type\n\nThe following data-def-stmt substatements are constrained\nwhen used within a 'structure' extension statement.\n\n  - The list-stmt is not required to have a key-stmt defined.\n  - The config-stmt is ignored if present.\n","extension-name":null,"statements":[]}]},{"ArgumentStart":4329,"ArgumentStop":4345,"KeywordStart":4319,"KeywordStop":4327,"ArgumentLine":119,"ArgumentColumn":12,"type":"Extension","argument":"augment-structure","extension-name":null,"statements":[{"ArgumentStart":4362,"ArgumentStop":4365,"KeywordStart":4353,"KeywordStop":4360,"ArgumentLine":120,"ArgumentColumn":13,"type":"ExtensionInstance","argument":"path","extension-name":"argument","statements":[{"ArgumentStart":4387,"ArgumentStop":4390,"KeywordStart":4375,"KeywordStop":4385,"ArgumentLine":121,"ArgumentColumn":18,"type":"YinElement","argument":"true","extension-name":null,"statements":[]}]},{"ArgumentStart":4421,"ArgumentStop":7495,"KeywordStart":4403,"KeywordStop":4413,"ArgumentLine":124,"ArgumentColumn":7,"type":"Description","argument":"This extension is used to specify an augmentation to a YANG\ndata structure defined with the 'structure' statement.  It is\nintended to describe hierarchical data independent of protocol\ncontext or specific message encoding format.\n\nThis statement has almost the same structure as the\n'augment-stmt'.  Data definition statements within this\nstatement specify the semantics and generic syntax for the\nadditional data to be added to the specific YANG data\nstructure, identified by the 'path' argument.\n\nThe mandatory 'path' parameter value identifies the YANG\nconceptual data node that is being augmented and is\nrepresented as an absolute-schema-nodeid string, where the\nfirst node in the absolute-schema-nodeid string identifies the\nYANG data structure to augment, and the rest of the nodes in\nthe string identifies the node within the YANG structure to\naugment.\n\nThis extension is only valid as a top-level statement, i.e.,\ngiven as a substatement to 'module' or 'submodule'.\n\nThe substatements of this extension MUST follow the ABNF\nrules below, where the rules are defined in RFC 7950:\n\n  [status-stmt]\n  [description-stmt]\n  [reference-stmt]\n  1*(data-def-stmt / case-stmt)\n\nThe module name and namespace value for the YANG module using\nthe extension statement are assigned to instance document data\nconforming to the data definition statements within this\nextension.\n\nThe XPath document element is the augmented extension\nstatement itself, such that the child nodes of the document\nelement are represented by the data-def-stmt substatements\nwithin the augmented 'structure' statement.\n\nThe context node of the 'augment-structure' statement is\nderived in the same way as the 'augment' statement, as defined\nin Section 6.4.1 of [RFC7950]. This conceptual node is\nconsidered the context node for the following YANG statements:\n\n  - must-stmt\n  - when-stmt\n  - path-stmt\n  - min-elements-stmt\n  - max-elements-stmt\n  - mandatory-stmt\n  - unique-stmt\n  - ordered-by\n  - instance-identifier data type\n\nThe following data-def-stmt substatements are constrained\nwhen used within an 'augment-structure' extension statement.\n\n  - The list-stmt is not required to have a key-stmt defined.\n  - The config-stmt is ignored if present.\n\nExample:\n\n   module foo {\n      import ietf-yang-structure-ext { prefix sx; }\n\n      sx:structure foo-data {\n        container foo-con { }\n      }\n   }\n\n   module bar {\n      import ietf-yang-structure-ext { prefix sx; }\n      import foo { prefix foo; }\n\n      sx:augment-structure /foo:foo-data/foo:foo-con {\n        leaf add-leaf1 { type int32; }\n        leaf add-leaf2 { type string; }\n      }\n   }\n","extension-name":null,"statements":[]}]}]}]